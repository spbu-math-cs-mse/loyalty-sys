package com.loyalitysys

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.activity.result.ActivityResultLauncher
import androidx.appcompat.app.AppCompatActivity
import com.loyalitysys.network.NetworkHandler
import com.journeyapps.barcodescanner.ScanContract
import com.journeyapps.barcodescanner.ScanOptions

enum class Types(val data: String) {
    CUSTOMER("customer"),
    PURCHASE("purchase"),
    UNDEFINED("undefined")
}

enum class DataStatus(val status: String) {
    CUSTOMER_NONE("Customer Data: None"),
    CUSTOMER_SCANNED("Customer Data: Scanned"),
    PURCHASE_NONE("Purchase Data: None"),
    PURCHASE_SCANNED("Purchase Data: Scanned")
}


class MainActivity : AppCompatActivity() {

    private lateinit var customerDataTextView: TextView
    private lateinit var purchaseDataTextView: TextView
    private var currentType = Types.UNDEFINED
    private var customerData = ""
    private var purchaseData = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        customerDataTextView = findViewById(R.id.customerDataTextView)
        purchaseDataTextView = findViewById(R.id.purchaseDataTextView)

        val scanCustomerButton = findViewById<Button>(R.id.scanCustomerButton)
        val clearCustomerButton = findViewById<Button>(R.id.clearCustomerButton)
        val scanPurchaseButton = findViewById<Button>(R.id.scanPurchaseButton)
        val clearPurchaseButton = findViewById<Button>(R.id.clearPurchaseButton)
        val sendDataButton = findViewById<Button>(R.id.sendDataButton)

        scanCustomerButton.setOnClickListener { scanQRCode(Types.CUSTOMER) }
        clearCustomerButton.setOnClickListener { clearCustomerData() }
        scanPurchaseButton.setOnClickListener { scanQRCode(Types.PURCHASE) }
        clearPurchaseButton.setOnClickListener { clearPurchaseData() }
        sendDataButton.setOnClickListener { sendDataToServer() }
    }

    // TODO: move scan logic to separate class
    private fun scanQRCode(type: Types) {
        val options = ScanOptions()
            .setPrompt("Scan QR code")
            .setOrientationLocked(false)
        currentType = type
        barcodeLauncher.launch(options)
    }

    private val barcodeLauncher: ActivityResultLauncher<ScanOptions> =
        registerForActivityResult(ScanContract()) { result ->
                if (result.contents != null) {
                    if (currentType == Types.CUSTOMER) {
                        // TODO: inject some data to QR which will allow us to make sure that the given QR is generated by our system and check this data here
                        customerData = result.contents
                        customerDataTextView.text = DataStatus.CUSTOMER_SCANNED.status
                        Log.d("QR scanner", "Scanned for customer: $customerData")
                    } else if (currentType == Types.PURCHASE) {
                        purchaseData = result.contents
                        purchaseDataTextView.text = DataStatus.PURCHASE_SCANNED.status
                        Log.d("QR scanner", "Scanned for purchase: $purchaseData")
                    } else {
                        Log.d("QR scanner", "Unexpected type: $currentType")
                    }
                } else {
                    Log.d("QR scanner", "No result")
                }
        }


    private fun clearCustomerData() {
        customerData = ""
        customerDataTextView.text = DataStatus.CUSTOMER_NONE.status
    }

    private fun clearPurchaseData() {
        purchaseData = ""
        purchaseDataTextView.text = DataStatus.PURCHASE_NONE.status
    }

    private fun sendDataToServer() {
        if (customerData != "" && purchaseData != "") {
            // TODO: add required processing and validation
            NetworkHandler.sendLastPurchase(customerData)
        }
    }
}
