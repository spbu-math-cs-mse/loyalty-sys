package com.loyalitysys

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.activity.result.ActivityResultLauncher
import androidx.appcompat.app.AppCompatActivity
import com.example.loyalitysys.network.NetworkHandler
import com.journeyapps.barcodescanner.ScanContract
import com.journeyapps.barcodescanner.ScanOptions

class MainActivity : AppCompatActivity() {

    private lateinit var tvCustomerData: TextView
    private lateinit var tvPurchaseData: TextView
    private var currentType = "undefined"
    private var customerData = ""
    private var purchaseData = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tvCustomerData = findViewById(R.id.tvCustomerData)
        tvPurchaseData = findViewById(R.id.tvPurchaseData)

        val btnScanCustomer = findViewById<Button>(R.id.btnScanCustomer)
        val btnClearCustomer = findViewById<Button>(R.id.btnClearCustomer)
        val btnScanPurchase = findViewById<Button>(R.id.btnScanPurchase)
        val btnClearPurchase = findViewById<Button>(R.id.btnClearPurchase)
        val btnSendData = findViewById<Button>(R.id.btnSendData)

        btnScanCustomer.setOnClickListener { scanQRCode("customer") }
        btnClearCustomer.setOnClickListener { clearCustomerData() }
        btnScanPurchase.setOnClickListener { scanQRCode("purchase") }
        btnClearPurchase.setOnClickListener { clearPurchaseData() }
        btnSendData.setOnClickListener { sendDataToServer() }
    }

    // TODO: move scan logic to separate class
    private fun scanQRCode(type: String) {
        val options = ScanOptions()
            .setPrompt("Scan QR code")
            .setOrientationLocked(false)
        currentType = type
        barcodeLauncher.launch(options)
    }

    private val barcodeLauncher: ActivityResultLauncher<ScanOptions> =
        registerForActivityResult(ScanContract()) { result ->
                if (result.contents != null) {
                    if (currentType == "customer") {
                        // TODO: inject some data to QR which will allow us to make sure that the given QR is generated by our system and check this data here
                        customerData = result.contents
                        tvCustomerData.text = "Customer Data: Scanned"
                        Log.d("QR scanner", "Scanned for customer: $customerData")
                    } else if (currentType == "purchase") {
                        purchaseData = result.contents
                        tvPurchaseData.text = "Purchase Data: Scanned"
                        Log.d("QR scanner", "Scanned for purchase: $purchaseData")
                    } else {
                        Log.d("QR scanner", "Unexpected type: $currentType")
                    }
                } else {
                    Log.d("QR scanner", "No result")
                }
        }


    private fun clearCustomerData() {
        customerData = ""
        tvCustomerData.text = "Customer Data: None"
    }

    private fun clearPurchaseData() {
        purchaseData = ""
        tvPurchaseData.text = "Purchase Data: None"
    }

    private fun sendDataToServer() {
        if (customerData != "" && purchaseData != "") {
            // TODO: add required processing and validation
            NetworkHandler.sendLastPurchase(customerData)
        }
    }
}